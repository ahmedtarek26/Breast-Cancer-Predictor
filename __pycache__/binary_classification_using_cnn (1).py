# -*- coding: utf-8 -*-
"""binary classification using CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11PmT6muuZcKGIqHBrzPKp6mROfjMKr80
"""

from zipfile import ZipFile 
file_name = 'BCP_Image_Dataset.zip'

with ZipFile(file_name,'r')as zip:
  zip.extractall()
  print('done')

# Imports needed
import os

os.environ["TF_CPP_MIN_LOG_LEVEL"] = "2"
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.preprocessing.image import ImageDataGenerator

img_height = 28
img_width = 28
batch_size = 2

model = keras.Sequential(
    [
        layers.Input((28, 28, 1)),
        layers.Conv2D(16, 3, padding="same"),
        layers.Conv2D(32, 3, padding="same"),
        layers.MaxPooling2D(),
        layers.Flatten(),
        layers.Dense(1),
    ]
)

ds_train = tf.keras.preprocessing.image_dataset_from_directory(
    '/content/BCP_Image_Dataset',
    labels="inferred",
    label_mode="binary", 
    color_mode="grayscale",
    batch_size=batch_size,
    image_size=(img_height, img_width),  # reshape if not in this size
    shuffle=True,
    seed=123,
    validation_split=0.1,
    subset="training"
)

ds_validation = tf.keras.preprocessing.image_dataset_from_directory(
    "/content/BCP_Image_Dataset",
    labels="inferred",
    label_mode="binary",
    color_mode="grayscale",
    batch_size=batch_size,
    image_size=(img_height, img_width),  # reshape if not in this size
    shuffle=True,
    seed=123,
    validation_split=0.1,
    subset="validation"
)

def augment(x, y):
    image = tf.image.random_brightness(x, max_delta=0.05)
    return image, y


ds_train = ds_train.map(augment)

# Custom Loops
for epochs in range(10):
    for x, y in ds_train:
        # train here
        pass


model.compile(
    optimizer=keras.optimizers.Adam(),
    loss='binary_crossentropy',
    metrics=["accuracy"],
)

print(model.summary())    


model.fit(ds_train, epochs=10, verbose=2)  # you can change number of epochs

